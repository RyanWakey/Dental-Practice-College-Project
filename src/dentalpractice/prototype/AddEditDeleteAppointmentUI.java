/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dentalpractice.prototype;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author wakey
 */
public class AddEditDeleteAppointmentUI extends javax.swing.JFrame {
String FILENAME = "Appointment.txt";
String PTFILENAME = "Patient.txt";
String[] savedData;

    /**
     * Creates new form AddEditDeletePatient
     */
    public AddEditDeleteAppointmentUI() {
        initComponents();
        setLocationRelativeTo(null);
        showTime();
        showDate();
    }
    DefaultTableModel model;
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        BackBtn = new javax.swing.JButton();
        SearchBtn = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        SearchTxt = new javax.swing.JTextField();
        SortBtn = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        AppTbl = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        AppIDTxt = new javax.swing.JTextField();
        AppStartTimeTxt = new javax.swing.JTextField();
        AppLengthTxt = new javax.swing.JTextField();
        AppEndTimeTxt = new javax.swing.JTextField();
        PatientIDTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        AppTypeCMB = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        AppDateTxt = new javax.swing.JTextField();
        TimeLbl = new javax.swing.JLabel();
        DateLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        SearchBtn.setText("Search");
        SearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBtnActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PatientID", "FirstName", "Surname" }));

        SortBtn.setText("Sort");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascending", "Descending" }));

        AppTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AppointmentID", "AppointmentDate", "AppointmentStartTime", "AppointmentType", "AppointmentLength", "AppointmentEndTime", "PatientID*"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        AppTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AppTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(AppTbl);

        jLabel1.setText("AppointmentID");

        jLabel2.setText("AppointmentStartTime");

        jLabel3.setText("AppointmentLength");

        jLabel4.setText("AppointmentEndTime");

        jLabel5.setText("PatientID");

        AppStartTimeTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AppStartTimeTxtActionPerformed(evt);
            }
        });

        AppLengthTxt.setEditable(false);
        AppLengthTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AppLengthTxtActionPerformed(evt);
            }
        });

        jLabel6.setText("AppointmentType");

        AppTypeCMB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CheckUp", "Fillings", "CrownFit", "CrownPrep", "RCT" }));
        AppTypeCMB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AppTypeCMBActionPerformed(evt);
            }
        });

        jLabel8.setText("AppDate");

        TimeLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        TimeLbl.setText("jLabel9");

        DateLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        DateLbl.setText("jLabel9");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                            .addGap(117, 117, 117))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addGap(91, 91, 91)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(AppStartTimeTxt)
                                                .addComponent(AppIDTxt)
                                                .addComponent(AppDateTxt))))
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(PatientIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                                        .addComponent(AppEndTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(8, 8, 8))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(AppTypeCMB, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(AppLengthTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)))
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(addBtn)
                        .addGap(29, 29, 29)
                        .addComponent(editBtn)
                        .addGap(31, 31, 31)
                        .addComponent(deleteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SortBtn)
                        .addGap(191, 191, 191))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clearBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DateLbl)
                        .addGap(158, 158, 158)
                        .addComponent(TimeLbl)
                        .addGap(308, 308, 308)
                        .addComponent(BackBtn)
                        .addGap(28, 28, 28))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(AppIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(AppDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(AppStartTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(AppTypeCMB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AppLengthTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AppEndTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PatientIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(64, 64, 64)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SortBtn)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(addBtn)
                                .addComponent(editBtn)
                                .addComponent(deleteBtn)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(SearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(SearchBtn)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearBtn)
                            .addComponent(BackBtn)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(TimeLbl)
                        .addComponent(DateLbl)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        model = (DefaultTableModel) AppTbl.getModel();
        String splitBy = ",";
        
        String appID = AppIDTxt.getText();
        String appDob = AppDateTxt.getText();
        String appStartTime = AppStartTimeTxt.getText();
        String appTypeCheck = AppTypeCMB.getSelectedItem().toString();
        String appLength = AppLengthTxt.getText();
        String appEndTime = AppEndTimeTxt.getText();
        String patientID = PatientIDTxt.getText(); 
        
        boolean validated = true;
        Validation valObject = new Validation();
        
        if (valObject.isInt(appID)== false){
            validated = false;
            JOptionPane.showMessageDialog(null, "ID is not an integer");
        }
        else if (valObject.isRange(Integer.parseInt(appID))== false){
            validated = false;
            JOptionPane.showMessageDialog(null, "ID is not an integer");
        }
        else if (valObject.isDate(appDob)== false){
            validated = false;
            JOptionPane.showMessageDialog(null, "ID is not an integer");
        }
        if(validated == true){
        ReadPatientDatabase();
            try{
                
                    
                
                FileWriter writer = new FileWriter(FILENAME, true);
                writer.write("\n" + appID + splitBy + appDob + splitBy + appStartTime + splitBy + appTypeCheck+ splitBy + appLength + splitBy + appEndTime + splitBy + patientID);
                writer.close();
                JOptionPane.showMessageDialog(null, "Success, details are stored in " + FILENAME);
                model.addRow(new Object[] {appID,appDob,appStartTime,appTypeCheck,appLength,appEndTime,patientID});
            
            
              
        } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error with" + FILENAME);

            }
        
        }
    }//GEN-LAST:event_addBtnActionPerformed
    
    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        model = (DefaultTableModel) AppTbl.getModel();
        String splitBy = ",";
        
        String appID = AppIDTxt.getText();
        String appDob = AppDateTxt.getText();
        String appStartTime = AppStartTimeTxt.getText();
        String appTypeCheck = AppTypeCMB.getSelectedItem().toString();
        String appLength = AppLengthTxt.getText();
        String appEndTime = AppEndTimeTxt.getText();
        String patientID = PatientIDTxt.getText(); 
        
        
        String temp = "temp.txt";
        boolean deleted = false;
        boolean renamed = false; 
        File oldFile = new File(FILENAME);
        File newFile = new File(temp);
        String line; // Stores the current line that is being read
        File Patient = new File(PTFILENAME);
       
        try{
            FileReader fr = new FileReader(oldFile);
            BufferedReader br = new BufferedReader(fr);
            FileWriter fw = new FileWriter(newFile, true);
            BufferedWriter bw = new BufferedWriter(fw);
            
           
            
           
            while(((line = br.readLine()) != null)) {//runs until end of file (no lines left to read)
                savedData = line.split(","); //saved data is global array and therefore splits each element of that array using the ","
                
                if((savedData[0].equalsIgnoreCase(appID))){ // if id is located in database 
                   bw.write("\n" + appID + splitBy + appDob + splitBy + appStartTime + splitBy + appTypeCheck+ splitBy + appLength + splitBy + appEndTime + splitBy + patientID); 
                    
                }else{
                   JOptionPane.showMessageDialog(null, "No PatientsID was found with this Number please try again");
                }
          }  
         bw.flush();
         bw.close(); 
         br.close();
        
         System.gc();
         
         deleted = oldFile.delete();
         renamed = newFile.renameTo(oldFile);
         
         if(renamed){
             JOptionPane.showMessageDialog(null, "Edited users details" + FILENAME);
             renamed = true;
         }else{
             System.err.println("Error with editing file");
         }
           
        }catch(Exception e){
        JOptionPane.showMessageDialog(null, "Error with" + FILENAME);
        System.out.println(e);
        } 
        
        
        
        DefaultTableModel model = (DefaultTableModel) AppTbl.getModel();
        if( AppTbl.getSelectedRow()==-1){
            if( AppTbl.getSelectedRow()==0){
                JOptionPane.showMessageDialog(null,"Table is empty");
            }else{
                JOptionPane.showMessageDialog(null,"cannot edit table");
            }
        }
        model.setValueAt(PatientIDTxt.getText(), AppTbl.getSelectedRow(),0);
        model.setValueAt(AppDateTxt.getText(), AppTbl.getSelectedRow(),1);
        model.setValueAt(AppStartTimeTxt.getText(), AppTbl.getSelectedRow(),2);
        model.setValueAt(AppTypeCMB.getSelectedIndex(), AppTbl.getSelectedRow(),3);
        model.setValueAt(AppEndTimeTxt.getText(), AppTbl.getSelectedRow(),4);
        model.setValueAt(PatientIDTxt.getText(), AppTbl.getSelectedRow(),5);
        model.setValueAt(AppStartTimeTxt.getText(), AppTbl.getSelectedRow(),2);
       
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
      
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        ClearFields(); /// calls the subroutine to clear all fields (apart from genders radio buttons)

    }//GEN-LAST:event_clearBtnActionPerformed

    private void SearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBtnActionPerformed
       
    }//GEN-LAST:event_SearchBtnActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    AppLengthTxt.setText("00:10");  
        try {
            FileReader fr = new FileReader(FILENAME);
            BufferedReader br = new BufferedReader(fr);
            
            DefaultTableModel model = (DefaultTableModel)AppTbl.getModel();
            Object[] lines = br.lines().toArray();
            
            for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split(",");
                model.addRow(row);
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AddEditDeleteAppointmentUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    
                                            

    }//GEN-LAST:event_formWindowOpened

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        MainMenuUI menu = new MainMenuUI();
        menu.setVisible(true);
        dispose();
    }//GEN-LAST:event_BackBtnActionPerformed

    private void AppTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AppTblMouseClicked

    }//GEN-LAST:event_AppTblMouseClicked

    private void AppTypeCMBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AppTypeCMBActionPerformed
String appTypeCheck = AppTypeCMB.getSelectedItem().toString();
        if(appTypeCheck.equals("CheckUp")){
        AppLengthTxt.setText("00:10");
        }
        else if(appTypeCheck.equals("Fillings")){
        AppLengthTxt.setText("00:30");
    }
        else if(appTypeCheck.equals("CrownFit")){
        AppLengthTxt.setText("00:45");
    }
        else if(appTypeCheck.equals("CrownPrep")){
        AppLengthTxt.setText("00:15");
    }
        else if(appTypeCheck.equals("RCT")){
        AppLengthTxt.setText("00:15");
                }
        
    
    }//GEN-LAST:event_AppTypeCMBActionPerformed

    private void AppLengthTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AppLengthTxtActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_AppLengthTxtActionPerformed

    private void AppStartTimeTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AppStartTimeTxtActionPerformed
        
        String endTime;
        String startTime = AppStartTimeTxt.getText();
        String appTypeCheck = AppTypeCMB.getSelectedItem().toString();
        if(appTypeCheck.equals("CheckUp")) {
            endTime = String.valueOf(startTime) + 15 ; 
            AppEndTimeTxt.setText(endTime);
        }
        char array[] = startTime.toCharArray();   
        
       
        
    }//GEN-LAST:event_AppStartTimeTxtActionPerformed
    private void ClearFields(){
        AppIDTxt.setText("");
        AppStartTimeTxt.setText("");
        AppLengthTxt.setText("");
        AppEndTimeTxt.setText("");
        AppTypeCMB.setSelectedIndex(0);
        PatientIDTxt.setText("");
        
        
    }
    public void showTime(){
        new Timer(0, new ActionListener(){ 
            
            @Override
            public void actionPerformed(ActionEvent e) {
            Date date = new Date();
            SimpleDateFormat simpledf = new SimpleDateFormat("hh:mm:ss a");
            TimeLbl.setText(simpledf.format(date));    
            }
        }).start();
    }
public void showDate(){
        Date date = new Date();
        SimpleDateFormat simpledf = new SimpleDateFormat("yyyy-MM-dd");
        DateLbl.setText(simpledf.format(date));
       
    }

public void ReadPatientDatabase(){
    
    String line;
    boolean validated = false;
    try{
        FileReader fr = new FileReader(PTFILENAME);
        BufferedReader br = new BufferedReader(fr);
        
        while(((line = br.readLine()) != null)) {//runs until end of file (no lines left to read)
                savedData = line.split(",");
        }
      if(savedData [0].equalsIgnoreCase(PatientIDTxt.getText())){
          validated = true;
      }  
     if(validated == false){
         JOptionPane.showMessageDialog(null,"PatientID not found");
     }
     
    }catch(Exception e){
        System.out.println(e);
    }
            
}
     private void SearchAppTable(){
        boolean found = false; // boolean flag to indicate if search string found
        String line; // string to temporarily store the line/record read from the file
        try{
        // Create a file reader object 
        FileReader fileReader = new FileReader(FILENAME);
        BufferedReader bufferRead = new BufferedReader(fileReader);
        // Loop through file line by line until the end of the file or until we have found it 
            while (((line = bufferRead.readLine()) != null) && (found == false)) {
                savedData = line.split(","); 
                //check if the record matches
                if(savedData [0].equalsIgnoreCase(SearchTxt.getText())){
                    found = true; // set found to true to stop looping 
                }
        }
 
        if (found == true){  
            AppDetails(savedData);//display data in the correct text fields 
            
           ;
            
        
        }else{
            JOptionPane.showMessageDialog(null, "couldnt find", "Search", JOptionPane.INFORMATION_MESSAGE);
        }
        fileReader.close();  // close file 
        }catch(IOException ex){
            System.err.println("error");
        }
    }
     private void AppDetails(String[] dataArray){ 
        AppIDTxt.setText(dataArray[0]);
        AppDateTxt.setText(dataArray[1]);
        AppStartTimeTxt.setText(dataArray[2]);
        AppTypeCMB.setSelectedItem(dataArray[3]);
        AppLengthTxt.setText(dataArray[4]);
        PatientIDTxt.setText(dataArray[5]);
        
        
     }


     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddEditDeleteAppointmentUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddEditDeleteAppointmentUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddEditDeleteAppointmentUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddEditDeleteAppointmentUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddEditDeleteAppointmentUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AppDateTxt;
    private javax.swing.JTextField AppEndTimeTxt;
    private javax.swing.JTextField AppIDTxt;
    private javax.swing.JTextField AppLengthTxt;
    private javax.swing.JTextField AppStartTimeTxt;
    private javax.swing.JTable AppTbl;
    private javax.swing.JComboBox<String> AppTypeCMB;
    private javax.swing.JButton BackBtn;
    private javax.swing.JLabel DateLbl;
    private javax.swing.JTextField PatientIDTxt;
    private javax.swing.JButton SearchBtn;
    private javax.swing.JTextField SearchTxt;
    private javax.swing.JButton SortBtn;
    private javax.swing.JLabel TimeLbl;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
